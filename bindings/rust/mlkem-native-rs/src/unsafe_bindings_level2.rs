/* automatically generated by rust-bindgen 0.71.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2Y: u32 = 0;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 41;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const MLKEM512_SECRETKEYBYTES: u32 = 1632;
pub const MLKEM512_PUBLICKEYBYTES: u32 = 800;
pub const MLKEM512_CIPHERTEXTBYTES: u32 = 768;
pub const MLKEM768_SECRETKEYBYTES: u32 = 2400;
pub const MLKEM768_PUBLICKEYBYTES: u32 = 1184;
pub const MLKEM768_CIPHERTEXTBYTES: u32 = 1088;
pub const MLKEM1024_SECRETKEYBYTES: u32 = 3168;
pub const MLKEM1024_PUBLICKEYBYTES: u32 = 1568;
pub const MLKEM1024_CIPHERTEXTBYTES: u32 = 1568;
pub const MLKEM_SYMBYTES: u32 = 32;
pub const MLKEM512_SYMBYTES: u32 = 32;
pub const MLKEM768_SYMBYTES: u32 = 32;
pub const MLKEM1024_SYMBYTES: u32 = 32;
pub const MLKEM_BYTES: u32 = 32;
pub const MLKEM512_BYTES: u32 = 32;
pub const MLKEM768_BYTES: u32 = 32;
pub const MLKEM1024_BYTES: u32 = 32;
pub const CRYPTO_SYMBYTES: u32 = 32;
pub const CRYPTO_BYTES: u32 = 32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
unsafe extern "C" {
    #[doc = " Name:        crypto_kem_keypair_derand\n\n Description: Generates public and private key\n              for CCA-secure ML-KEM key encapsulation mechanism\n\n Arguments:   - uint8_t pk[]: pointer to output public key, an array of\n                 length MLKEM{512,768,1024}_PUBLICKEYBYTES bytes.\n              - uint8_t sk[]: pointer to output private key, an array of\n                  of MLKEM{512,768,1024}_SECRETKEYBYTES bytes.\n              - uint8_t *coins: pointer to input randomness, an array of\n                  2*MLKEM_SYMBYTES uniformly random bytes.\n\n Returns:     - 0: On success\n              - -1: On PCT failure (if MLK_CONFIG_KEYGEN_PCT) is enabled.\n\n Specification: Implements [FIPS 203, Algorithm 16, ML-KEM.KeyGen_Internal]\n"]
    pub fn PQCP_MLKEM_NATIVE_MLKEM512_keypair_derand(
        pk: *mut u8,
        sk: *mut u8,
        coins: *const u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Name:        crypto_kem_keypair\n\n Description: Generates public and private key\n              for CCA-secure ML-KEM key encapsulation mechanism\n\n Arguments:   - uint8_t *pk: pointer to output public key, an array of\n                 MLKEM{512,768,1024}_PUBLICKEYBYTES bytes.\n              - uint8_t *sk: pointer to output private key, an array of\n                 MLKEM{512,768,1024}_SECRETKEYBYTES bytes.\n\n Returns:     - 0: On success\n              - -1: On PCT failure (if MLK_CONFIG_KEYGEN_PCT) is enabled.\n\n Specification: Implements [FIPS 203, Algorithm 19, ML-KEM.KeyGen]\n"]
    pub fn PQCP_MLKEM_NATIVE_MLKEM512_keypair(pk: *mut u8, sk: *mut u8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Name:        crypto_kem_enc_derand\n\n Description: Generates cipher text and shared\n              secret for given public key\n\n Arguments:   - uint8_t *ct: pointer to output cipher text, an array of\n                 MLKEM{512,768,1024}_CIPHERTEXTBYTES bytes.\n              - uint8_t *ss: pointer to output shared secret, an array of\n                 MLKEM_BYTES bytes.\n              - const uint8_t *pk: pointer to input public key, an array of\n                 MLKEM{512,768,1024}_PUBLICKEYBYTES bytes.\n              - const uint8_t *coins: pointer to input randomness, an array of\n                 MLKEM_SYMBYTES bytes.\n\n Returns: - 0 on success\n          - -1 if the 'modulus check' [FIPS 203, Section 7.2]\n            for the public key fails.\n\n Specification: Implements [FIPS 203, Algorithm 17, ML-KEM.Encaps_Internal]\n"]
    pub fn PQCP_MLKEM_NATIVE_MLKEM512_enc_derand(
        ct: *mut u8,
        ss: *mut u8,
        pk: *const u8,
        coins: *const u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Name:        crypto_kem_enc\n\n Description: Generates cipher text and shared\n              secret for given public key\n\n Arguments:   - uint8_t *ct: pointer to output cipher text, an array of\n                 MLKEM{512,768,1024}_CIPHERTEXTBYTES bytes.\n              - uint8_t *ss: pointer to output shared secret, an array of\n                 MLKEM_BYTES bytes.\n              - const uint8_t *pk: pointer to input public key, an array of\n                 MLKEM{512,768,1024}_PUBLICKEYBYTES bytes.\n\n Returns: - 0 on success\n          - -1 if the 'modulus check' [FIPS 203, Section 7.2]\n            for the public key fails.\n\n Specification: Implements [FIPS 203, Algorithm 20, ML-KEM.Encaps]\n"]
    pub fn PQCP_MLKEM_NATIVE_MLKEM512_enc(
        ct: *mut u8,
        ss: *mut u8,
        pk: *const u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Name:        crypto_kem_dec\n\n Description: Generates shared secret for given\n              cipher text and private key\n\n Arguments:   - uint8_t *ss: pointer to output shared secret, an array of\n                 MLKEM_BYTES bytes.\n              - const uint8_t *ct: pointer to input cipher text, an array of\n                 MLKEM{512,768,1024}_CIPHERTEXTBYTES bytes.\n              - const uint8_t *sk: pointer to input private key, an array of\n                 MLKEM{512,768,1024}_SECRETKEYBYTES bytes.\n\n Returns: - 0 on success\n          - -1 if the 'hash check' [FIPS 203, Section 7.3]\n            for the secret key fails.\n\n Specification: Implements [FIPS 203, Algorithm 21, ML-KEM.Decaps]\n"]
    pub fn PQCP_MLKEM_NATIVE_MLKEM512_dec(
        ss: *mut u8,
        ct: *const u8,
        sk: *const u8,
    ) -> ::std::os::raw::c_int;
}
